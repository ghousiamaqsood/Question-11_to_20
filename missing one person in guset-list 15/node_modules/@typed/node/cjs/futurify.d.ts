import { Future } from '@typed/future';
export declare function futurify<R>(fn: (cb: NodeCallback<R>) => void): () => Future<never, Error, R>;
export declare function futurify<A, R>(fn: (a: A, cb: NodeCallback<R>) => void): (a: A) => Future<never, Error, R>;
export declare function futurify<A, B, R>(fn: (a: A, b: B, cb: NodeCallback<R>) => void): (a: A, b: B) => Future<never, Error, R>;
export declare function futurify<A, B, C, R>(fn: (a: A, b: B, c: C, cb: NodeCallback<R>) => void): (a: A, b: B, c: C) => Future<never, Error, R>;
export declare function futurify<A, B, C, D, R>(fn: (a: A, b: B, c: C, d: D, cb: NodeCallback<R>) => void): (a: A, b: B, c: C, d: D) => Future<never, Error, R>;
export declare function futurify<A, B, C, D, E, R>(fn: (a: A, b: B, c: C, d: D, e: E, cb: NodeCallback<R>) => void): (a: A, b: B, c: C, d: D, e: E) => Future<never, Error, R>;
export declare function futurify<A, B, C, D, E, F, R>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, cb: NodeCallback<R>) => void): (a: A, b: B, c: C, d: D, e: E, f: F) => Future<never, Error, R>;
export declare function futurify<A, B, C, D, E, F, G, R>(fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G, cb: NodeCallback<R>) => void): (a: A, b: B, c: C, d: D, e: E, f: F, g: G) => Future<never, Error, R>;
export declare type NodeCallback<A> = (error: Error | null | undefined | void, value?: A) => void;
export declare type NodeCallbackFn = {
    <A, B, C, D, E, F, G, R>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, cb: NodeCallback<R>): void;
    <A, B, C, D, E, F, R>(a: A, b: B, c: C, d: D, e: E, f: F, cb: NodeCallback<R>): void;
    <A, B, C, D, E, R>(a: A, b: B, c: C, d: D, e: E, cb: NodeCallback<R>): void;
    <A, B, C, D, R>(a: A, b: B, c: C, d: D, cb: NodeCallback<R>): void;
    <A, B, C, R>(a: A, b: B, c: C, cb: NodeCallback<R>): void;
    <A, B, R>(a: A, b: B, cb: NodeCallback<R>): void;
    <A, R>(a: A, cb: NodeCallback<R>): void;
    <R>(cb: NodeCallback<R>): void;
};
//# sourceMappingURL=futurify.d.ts.map