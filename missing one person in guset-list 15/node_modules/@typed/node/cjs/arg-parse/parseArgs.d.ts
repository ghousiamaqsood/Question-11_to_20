import { Effects } from '@typed/effects';
import { OrToAnd } from '@typed/lambda';
import { ArgParser, ArgParserNameValue, ArgsEnv } from './types';
export declare function parseArgs<A extends ReadonlyArray<ArgParser<any, any>>>(parsers: A): Effects<ArgsEnv, ArgValues<A>>;
export declare type ArgValues<A extends ArrayLike<ArgParser<any, any>>> = OrToAnd<ArgNameValues<A>> & {
    readonly _: readonly string[];
    readonly help: boolean;
};
export declare type ArgNameValues<A extends ArrayLike<ArgParser<any, any>>> = Partial<Exclude<{
    [K in keyof A]: A[K] extends ArgParser<any, any> ? ArgParserNameValue<A[K]> : never;
}[keyof A], number | Function>>;
//# sourceMappingURL=parseArgs.d.ts.map