import { Effects, PureEffect } from '@typed/effects';
import { LoggerEnv } from '@typed/logger';
import { Maybe } from '@typed/maybe';
export interface ArgsEnv extends LoggerEnv {
    readonly args: readonly string[];
}
export interface ArgParser<A extends string, B> {
    readonly help: () => PureEffect<string>;
    readonly parse: () => Effects<ArgsEnv, ArgParserResult<A, B>>;
}
export declare type ParseOptions = {
    readonly aliases?: readonly string[];
    readonly help?: string;
};
export declare type ArgParserResult<A extends string, B> = readonly [readonly number[], Maybe<{
    [K in A]: B;
}>];
export declare type ArgParserResultValue<A> = A extends ArgParserResult<any, infer R> ? R : never;
export declare namespace ArgParserResult {
    const none: ArgParserResult<never, never>;
}
export declare type ArgParserNameValue<A> = A extends ArgParser<infer Name, infer Value> ? {
    readonly [K in Name]: Value;
} : never;
export declare type ArgParserValue<A> = A extends ArgParser<any, infer Value> ? Value : never;
export declare type ArgParserName<A> = A extends ArgParser<infer Name, any> ? Name : never;
//# sourceMappingURL=types.d.ts.map