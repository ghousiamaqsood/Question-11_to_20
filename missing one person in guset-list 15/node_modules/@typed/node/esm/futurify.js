import { Disposable, withIsDisposed } from '@typed/disposable';
import { Future } from '@typed/future';
export function futurify(fn) {
    return (...args) => {
        return Future.create((reject, resolve) => {
            const disposable = Disposable.lazy();
            disposable.addDisposable(withIsDisposed((isDisposed) => {
                args.push((err, value) => {
                    if (isDisposed()) {
                        return;
                    }
                    if (err) {
                        return disposable.addDisposable(reject(err));
                    }
                    return disposable.addDisposable(resolve(value));
                });
                fn.apply(void 0, args);
            }));
            return disposable;
        });
    };
}
//# sourceMappingURL=futurify.js.map