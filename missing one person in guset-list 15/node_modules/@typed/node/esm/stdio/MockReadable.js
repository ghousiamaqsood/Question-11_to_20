import { Readable } from 'stream';
const defaults = {
    encoding: 'utf8',
};
export class MockReadable extends Readable {
    constructor(options) {
        super({ ...defaults, ...options });
        this.readData = [];
        this.writeData = [];
        this.options = { ...defaults, ...options };
    }
    _read(size) {
        const data = this.readData;
        if (size === void 0) {
            size = data.length;
        }
        let count = 0;
        while (this.readable && data.length && count < size) {
            const item = data.shift();
            if (!this.push(item, this.options.encoding)) {
                this.readable = false;
            }
            ++count;
        }
    }
    write(...data) {
        if (!this.readable) {
            throw new Error('This stream has already finished');
        }
        const values = data.map((x) => x.toString());
        this.readData.push(...values);
        this.writeData.push(...values);
        this._read();
        for (const value of values) {
            this.emit('data', value);
        }
        return this;
    }
    data() {
        return this.writeData.slice(0);
    }
    end(...args) {
        this.readable = false;
        process.nextTick(() => {
            this.emit('end', ...args);
        });
    }
}
//# sourceMappingURL=MockReadable.js.map