import { uniq } from '@typed/list';
import { fromJust, isNothing, map, Maybe, Nothing } from '@typed/maybe';
import { createParser } from './createParser';
import { getPositionalArgumentValue } from './getPositionalArgumentValue';
export function parseStringArg(name, options = {}) {
    return createParser(name, options, (index, args) => {
        const [valueIndex, value] = parseStringArgByPosition(index, args);
        const indexesUsed = uniq([index, valueIndex]);
        const result = [
            indexesUsed,
            map((value) => ({ [name]: value }), value),
        ];
        return result;
    });
}
function parseStringArgByPosition(index, args) {
    const positionalArg = getPositionalArgumentValue(index, args);
    if (isNothing(positionalArg)) {
        return [index, Nothing];
    }
    const [valueIndex, arg] = fromJust(positionalArg);
    return [valueIndex, Maybe.fromString(arg)];
}
//# sourceMappingURL=parseStringArg.js.map