"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConsoleLogger = void 0;
const env_1 = require("@typed/env");
/**
 * Create a logger that wraps the console.
 */
function createConsoleLogger({ logLevel, clock }) {
    const timers = {};
    const logger = {
        log: (msg) => env_1.Pure.fromIO(() => {
            if (logLevel > 0 /* OFF */) {
                console.log(msg);
            }
        }),
        error: (msg) => env_1.Pure.fromIO(() => {
            if (logLevel > 0 /* OFF */) {
                console.error(msg);
            }
        }),
        clear: () => env_1.Pure.fromIO(() => {
            if (logLevel > 0 /* OFF */ && logLevel < 3 /* DEBUG */) {
                console.clear();
            }
        }),
        info: (msg) => env_1.Pure.fromIO(() => {
            if (logLevel >= 2 /* INFO */) {
                console.info(msg);
            }
        }),
        debug: (msg) => env_1.Pure.fromIO(() => {
            if (logLevel >= 3 /* DEBUG */) {
                console.debug(msg);
            }
        }),
        timeStart: (label) => env_1.Pure.fromIO(() => {
            if (logLevel < 3 /* DEBUG */) {
                return;
            }
            timers[label] = clock.currentTime();
        }),
        timeEnd: (label) => env_1.Pure.fromIO(() => {
            if (logLevel < 3 /* DEBUG */ || !timers[label]) {
                return -1;
            }
            const startTime = timers[label];
            const elapsed = clock.currentTime() - startTime;
            delete timers[label];
            console.debug(`${label}: ${elapsed}ms`);
            return elapsed;
        }),
    };
    return logger;
}
exports.createConsoleLogger = createConsoleLogger;
//# sourceMappingURL=createConsoleLogger.js.map