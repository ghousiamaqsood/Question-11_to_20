import { Pure } from '@typed/env';
import { clone } from '@typed/objects';
/**
 * Create a logger suitable for testing environments.
 */
export function createTestLogger({ logLevel, clock }) {
    const timers = {};
    const logs = [];
    const logger = {
        log: (msg) => Pure.fromIO(() => {
            if (logLevel > 0 /* OFF */) {
                logs.push({ type: 'log', message: msg });
            }
        }),
        error: (msg) => Pure.fromIO(() => {
            if (logLevel > 0 /* OFF */) {
                logs.push({ type: 'error', message: msg });
            }
        }),
        clear: () => Pure.fromIO(() => {
            if (logLevel > 0 /* OFF */ && logLevel < 3 /* DEBUG */) {
                logs.push({ type: 'clear' });
            }
        }),
        info: (msg) => Pure.fromIO(() => {
            if (logLevel >= 2 /* INFO */) {
                logs.push({ type: 'info', message: msg });
            }
        }),
        debug: (msg) => Pure.fromIO(() => {
            if (logLevel >= 3 /* DEBUG */) {
                logs.push({ type: 'debug', message: msg });
            }
        }),
        timeStart: (label) => Pure.fromIO(() => {
            if (logLevel < 3 /* DEBUG */) {
                return;
            }
            const time = clock.currentTime();
            timers[label] = time;
            logs.push({ type: 'timeStart', label, time });
        }),
        timeEnd: (label) => Pure.fromIO(() => {
            if (logLevel < 3 /* DEBUG */) {
                return -1;
            }
            const time = clock.currentTime();
            const startTime = timers[label];
            const elapsed = startTime - time;
            delete timers[label];
            logs.push({ type: 'timeEnd', label, time });
            return elapsed;
        }),
    };
    return {
        logger,
        getLogs: () => clone(logs),
    };
}
//# sourceMappingURL=createTestLogger.js.map